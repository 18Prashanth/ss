#include <stdio.h>
#include <stdlib.h>
int Max[10][10], need[10][10], alloc[10][10], avail[10], finished[10],
safeSequence[10],work[10],request[10][10];
int p, r, i,rp,j,k, process, count,vc,wc;
int found=0;
int safestate()
{
count=0;
for(i=0;i<p;i++)
finished[i]=-1;
for (j=0;j < r;j++)
work[j]=avail[j];
while(count!=p)
{
found=0;
for(i=0;i<p;i++)
{
if(finished[i]==-1)
{
for(j=0;j<r;j++)
{
if(need[i][j]>work[j])
break;
}
if(j==r)
{
for(k=0;k<r;k++)
work[k]=work[k]+alloc[i][k];
safeSequence[count++]=i;
finished[i]=1;
printf("process %d finished \n",i);
found=1;
}
}
}
if(found==0)
{
printf("\nThe system is in an unsafe state!!");
break;}
}
if(count == p)
{
printf("\nThe system is in a safe state!!\n"); printf("Safe Sequence : < ");
for( i = 0; i < p; i++)
printf("%d ", safeSequence[i]);
printf(">\n");
}
}
int main()
{
printf("Enter the no of processes : ");
scanf("%d", &p);
printf("\n\nEnter the no of resources : "); scanf("%d", &r);
printf("\n\nEnter the Max Matrix for each process : ");
for(i = 0; i < p; i++)
{
printf("\nFor process %d : ", i + 1);
for(j = 0; j < r; j++)
scanf("%d", &Max[i][j]);
}
printf("\n\nEnter the allocation for each process : ");
for(i = 0; i < p; i++)
{
printf("\nFor process %d : ",i + 1);
for(j = 0; j < r; j++)
scanf("%d", &alloc[i][j]);
}
printf("\n\nEnter the Available Resources : ");
for(i = 0; i < r; i++)
scanf("%d", &avail[i]);
for(i = 0; i < p; i++)
for(j = 0; j < r; j++)
need[i][j] = Max[i][j] - alloc[i][j];
printf("\n Max matrix:\tAllocation matrix:\tNeed Matrix\n");
for(i = 0; i < p; i++)
{
for( j = 0; j < r; j++)
printf("%d ", Max[i][j]);
printf("\t\t");
for( j = 0; j < r; j++)
printf("%d ", alloc[i][j]);
printf("\t\t\t");
for( j = 0; j < r; j++)
printf("%d ", need[i][j]);
printf("\n");
}
safestate();
vc=0,wc=0;
printf("\n Requesting process id:");
scanf("%d",&rp);
printf("enter the resources for requested process\n");
for(j=0;j<r;j++)
{
scanf("%d",&request[rp][j]);
if(request[rp][j]>need[rp][j])
{
vc=1;
printf("request[%d]>need[%d]",j,j);
}
if(request[rp][j]>avail[j])
{
wc=1;
printf("request[%d]>avail[%d]",j,j);
}
}
if(vc==1)
printf("error\n");
else if(wc==1)
printf("error\n");
else
{
for(j=0;j<r;j++)
{
avail[j]=avail[j]-request[rp][j];
alloc[rp][j]=alloc[rp][j]+request[rp][j];
need[rp][j]=need[rp][j]-request[rp][j];
}
printf("Resource request commited\n");
printf("Updated Matrices\n");
printf("\n Max matrix:\tAllocation matrix:\tNeed Matrix\n");
for(i = 0; i < p; i++)
{
for( j = 0; j < r; j++)
printf("%d ", Max[i][j]);
printf("\t\t");
for( j = 0; j < r; j++)
printf("%d ", alloc[i][j]);
printf("\t\t\t");
for( j = 0; j < r; j++)
printf("%d ", need[i][j]);
printf("\n");
}
printf("Available resources\n");
for( j = 0; j < r; j++)
printf("%d ", avail[j]);
safestate();
}
}
